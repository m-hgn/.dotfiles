#!/bin/zsh
#                     oooo        
#                     `888        
#   oooooooo  .oooo.o  888 .oo.   
#  d'""7d8P  d88(  "8  888P"Y88b  
#    .d8P'   `"Y88b.   888   888  
#  .d8P'  .P o.  )88b  888   888  
# d8888888P  8""888P' o888o o888o 
#                                 
#                                 
#                                 
# oooo                               .o8        o8o                    .o8           
# `888                              "888        `"'                   "888           
#  888  oooo   .ooooo.  oooo    ooo  888oooo.  oooo  ooo. .oo.    .oooo888   .oooo.o 
#  888 .8P'   d88' `88b  `88.  .8'   d88' `88b `888  `888P"Y88b  d88' `888  d88(  "8 
#  888888.    888ooo888   `88..8'    888   888  888   888   888  888   888  `"Y88b.  
#  888 `88b.  888    .o    `888'     888   888  888   888   888  888   888  o.  )88b 
# o888o o888o `Y8bod8P'     .8'      `Y8bod8P' o888o o888o o888o `Y8bod88P" 8""888P' 
#                       .o..P'                                                       
#                       `Y8P'                                                        
#


# -- vi mode --

bindkey -v                                          # enable vi mode
export KEYTIMEOUT=1                                 # quickly switch modes

bindkey -r -M vicmd ':'                             # disable the inescapable command mode
bindkey -r -M vicmd '^[/'                           # unmap <esc>/
bindkey -M vicmd '^[/' \
    history-incremental-search-backward             # remap <esc>/ to search

source "$ZDOTDIR/plugins/cursor-mode.zsh"           # different cursor per mode

zmodload zsh/complist                               #
bindkey -M menuselect 'h' vi-backward-char          #
bindkey -M menuselect 'k' vi-up-line-or-history     # hjkl through history/completion
bindkey -M menuselect 'l' vi-forward-char           #
bindkey -M menuselect 'j' vi-down-line-or-history   #

autoload -Uz select-bracketed select-quoted         #
zle -N select-quoted                                #
zle -N select-bracketed                             #
for km in viopp visual; do                          #
  bindkey -M $km -- '-' vi-up-line-or-history       # quote and bracket text objects
  for c in {a,i}${(s..)^:-\'\"\`\|,./:;=+@}; do     #
    bindkey -M $km $c select-quoted                 #
  done                                              #
  for c in {a,i}${(s..)^:-'()[]{}<>bB'}; do         #
    bindkey -M $km $c select-bracketed              #
  done
done

autoload -Uz surround                               #
zle -N delete-surround surround                     #
zle -N add-surround surround                        #
zle -N change-surround surround                     #
bindkey -M vicmd cs change-surround                 # vim-surround binds
bindkey -M vicmd ds delete-surround                 #
bindkey -M vicmd ys add-surround                    #
bindkey -M visual S add-surround                    #


# -- defaults --

# [pageup] - up a line of history
if [[ -n "${terminfo[kpp]}" ]]; then
  bindkey -M emacs "${terminfo[kpp]}" up-line-or-history
  bindkey -M viins "${terminfo[kpp]}" up-line-or-history
  bindkey -M vicmd "${terminfo[kpp]}" up-line-or-history
fi
# [pagedown] - down a line of history
if [[ -n "${terminfo[knp]}" ]]; then
  bindkey -M emacs "${terminfo[knp]}" down-line-or-history
  bindkey -M viins "${terminfo[knp]}" down-line-or-history
  bindkey -M vicmd "${terminfo[knp]}" down-line-or-history
fi
# start typing + [up-arrow] - fuzzy find history forward
if [[ -n "${terminfo[kcuu1]}" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M viins "${terminfo[kcuu1]}" up-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# start typing + [down-arrow] - fuzzy find history backward
if [[ -n "${terminfo[kcud1]}" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search

  bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M viins "${terminfo[kcud1]}" down-line-or-beginning-search
  bindkey -M vicmd "${terminfo[kcud1]}" down-line-or-beginning-search
fi
# [home] - go to beginning of line
if [[ -n "${terminfo[khome]}" ]]; then
  bindkey -M emacs "${terminfo[khome]}" beginning-of-line
  bindkey -M viins "${terminfo[khome]}" beginning-of-line
  bindkey -M vicmd "${terminfo[khome]}" beginning-of-line
fi
# [end] - go to end of line
if [[ -n "${terminfo[kend]}" ]]; then
  bindkey -M emacs "${terminfo[kend]}"  end-of-line
  bindkey -M viins "${terminfo[kend]}"  end-of-line
  bindkey -M vicmd "${terminfo[kend]}"  end-of-line
fi
# [shift-tab] - move through the completion menu backwards
if [[ -n "${terminfo[kcbt]}" ]]; then
  bindkey -M emacs "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M viins "${terminfo[kcbt]}" reverse-menu-complete
  bindkey -M vicmd "${terminfo[kcbt]}" reverse-menu-complete
fi
# [backspace] - delete backward
bindkey -M emacs '^?' backward-delete-char
bindkey -M viins '^?' backward-delete-char
bindkey -M vicmd '^?' backward-delete-char
# [delete] - delete forward
if [[ -n "${terminfo[kdch1]}" ]]; then
  bindkey -M emacs "${terminfo[kdch1]}" delete-char
  bindkey -M viins "${terminfo[kdch1]}" delete-char
  bindkey -M vicmd "${terminfo[kdch1]}" delete-char
else
  bindkey -M emacs "^[[3~" delete-char
  bindkey -M viins "^[[3~" delete-char
  bindkey -M vicmd "^[[3~" delete-char

  bindkey -M emacs "^[3;5~" delete-char
  bindkey -M viins "^[3;5~" delete-char
  bindkey -M vicmd "^[3;5~" delete-char
fi
# [ctrl-delete] - delete whole forward-word
bindkey -M emacs '^[[3;5~' kill-word
bindkey -M viins '^[[3;5~' kill-word
bindkey -M vicmd '^[[3;5~' kill-word
# [ctrl-rightarrow] - move forward one word
bindkey -M emacs '^[[1;5C' forward-word
bindkey -M viins '^[[1;5C' forward-word
bindkey -M vicmd '^[[1;5C' forward-word
# [ctrl-leftarrow] - move backward one word
bindkey -M emacs '^[[1;5D' backward-word
bindkey -M viins '^[[1;5D' backward-word
bindkey -M vicmd '^[[1;5D' backward-word

